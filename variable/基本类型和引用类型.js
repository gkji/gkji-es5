

/*
2. 
基本类型: Undefined, Null, Boolean, Number, String, and Symbol
引用类型就是 Object, 除了基本基本类型之外, 其他都是引用类型
*/

/*
3. 基本类型和引用类型的区别
基本类型和引用类型在以下四个方面存在区别

1. 可变不可变 基本类型的值不可变；引用类型的值可变，并可随意为值添加属性和方法，可以动态改变引用类型的值
2. 值的比较 基本类型的比较就是值的比较；引用类型的值的比较是引用的比较，通俗的来讲是地址的比较，值一模一样地址不同也不相等
3. 内存模型 基本类型存在栈内存中，变量名与值一一对应；引用类型需要共同堆内存和栈内存，变量名与指针（指向堆内存的地址）保存在栈内存中，对象保存在堆内存中
4. 赋值 基本类型的赋值不会互相影响，一个基本类型赋值给另一个基本类型相当于取原变量的值，把这个值赋值给新变量；引用类型的赋值相当于指针的赋值，一个变量赋值给新变量，指向同一个堆内存中的对象，这两个变量是相等的
*/

/*
不太能接受上述的解释
1. 上面的四点的区别都是由内存模型决定的, 那么该内存模型是怎么实现的 ?
2. 基本类型和引用类型是用来描述值而非变量的, 那么基本类型的值不可变这是显而易见的
*/

//////////////////////////////////////////////////
/*
1. 对于任意一个变量都有三种信息
* 值: 右值
* 地址: 左值
* 类型
*/

/*
在使用变量的过程中, 有时使用的是 值, 有时使用的是地址, 所有每个变量变量有两种值: 左值(地址), 右值(值)
赋值符号左侧必须是左值, 右侧可以左值/右值
赋值是直接修改变量的右值
*/

/* 
1. 基本类型和引用类型描述的是 值 而非变量.
我们说一个变量是基本类型的, 实际上是说这个变量的值是基本类型的, 一个变量可以随意的被基本类型和引用类型赋值, 所以无所谓基本类型和引用类型
*/

// 引用类型是指针

// demo1
var name = "qinghe" // name 作为左值, 左值是地址, 右值是"qinghe"
log(name) // 右值, "qinghe"

let name2 = name //  name, 右值, "qinghe"

// dmeo2
let obj = {} // obj 作为左值, 左值是地址, 右值是 {地址}
let(obj) // 右值, {地址}, log 特殊处理

let obj2 = obj // obj, 右值, {地址}

obj.name = 'xx'


可以结论了, 基本类型和引用类型的区别就是 引用类型的右值是地址

右值是地址的, 也就是指针
引用类型就是指针类型
然后就可以引用 C 的栈和堆的概念来解释基本类型和引用类型了
不然说不通
因为 js 里没有栈和堆的概

普通变量定义在栈内存中, 内存地址保存变量的值
动态分配内存的变量也声明在栈上, 内存地址中保存的另一个内存地址, 该内存地址是一个堆内存地址

引用类型是 ptr , 而非 *ptr